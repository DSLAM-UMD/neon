# This YAML can be run using either docker-compose (single node) or Docker Swarm (multiple nodes).
# All of the following commands are run in the same directory as this file.
#
# Run with docker-compose
#   - Run the prepare script:
#
#       ./prepare-multi-region.sh compose <path to neon data (.neon)>
#
#   - Build the wrapped compute image:
#
#       docker compose -f docker-compose-multi-region.yml build
#
#   - Start the stack:
#       
#       docker compose -f docker-compose-multi-region.yml up -d
#
#   - The compute node will be available on port 55433:
#
#       psql -p55433 -h localhost -U cloud_admin postgres
#
#   - To stop this stack, run:
#
#       docker compose -f docker-compose-multi-region.yml down
#
# Run with Docker Swarm:
#   - Follow this tutorial to start a swarm: https://docs.docker.com/engine/swarm/swarm-tutorial/.
#     All of following commands starting with "docker" must be run on the manager node.
#
#   - Run the prepare script:
#
#       ./prepare-multi-region.sh swarm <path to neon data (.neon)>
#
#   - Build and push the compute image:
#
#       docker compose -f docker-compose-multi-region.yml build
#       docker compose -f docker-compose-multi-region.yml push
#
#   - Start this stack in the swarm:
#
#       docker stack deploy --compose-file docker-compose-multi-region.yml neon
#
#   - Some services are constrained based on node labels, so each of them will not run until it can find
#     a node having the labels that satisfy the constraints. For example, run the following command to label
#     a node named "vm1" to run the pageserver:
#
#       docker node update --label-add has_pageserver=true vm1
#
#   - The compute nodes will be available on port 55433 (region 1) and 55434 (region 2) of any node in
#     the swarm:
#
#       psql -p55433 -h <ip-of-any-node> -U cloud_admin postgres
#       psql -p55434 -h <ip-of-any-node> -U cloud_admin postgres
#
#   - To stop this stack:
#
#       docker stack rm neon
#
version: '3.8'

configs:
  compute_spec:
    file: ./compute_wrapper/var/db/postgres/specs/spec-multi-region.json
  compute_shell:
    file: ./compute_wrapper/shell/compute-multi-region.sh
  prometheus:
    file: ./prometheus.yml

networks:
  default:
    name: neon
    external: true

services:
  storage_broker:
    restart: always
    image: ${REPOSITORY:-neondatabase}/neon:${TAG:-latest}
    ports:
      - 50051:50051
    command:
      - "storage_broker"
      - "--listen-addr=0.0.0.0:50051"
    deploy:
      placement:
        constraints:
          - node.role==manager

  prometheus:
    restart: always
    image: prom/prometheus:latest
    ports:
      - 9090:9090
    configs:
      - source: prometheus
        target: /etc/prometheus/prometheus.yml

  #############################################
  #                 REGION 1                  #
  #############################################
  pageserver-r1: &pageserver
    restart: always
    image: ctring/neon:${TAG:-latest}
    environment:
      - BROKER_ENDPOINT='http://storage_broker:50051'
      - LISTEN_PG_ADDR=6400
      - LISTEN_HTTP_ADDR=9898
      #- RUST_BACKTRACE=1
      #- RUST_LOG=debug
    ports:
       #- 6400:6400  # pg protocol handler
       - 9898:9898 # http endpoints
    entrypoint:
      - "/bin/sh"
      - "-c"
    command:
      - |
        until (/usr/bin/mc alias set minio http://minio:9000 minioadmin minioadmin) do
             echo 'Waiting to start minio...' && sleep 1
        done
        rm -rf /data/.neon
        /usr/bin/mc cp -r minio/neon/.neon /data
        /usr/local/bin/pageserver -D /data/.neon/                                     \
                                  -c "broker_endpoint=$$BROKER_ENDPOINT"              \
                                  -c "listen_pg_addr='0.0.0.0:$$LISTEN_PG_ADDR'"      \
                                  -c "listen_http_addr='0.0.0.0:$$LISTEN_HTTP_ADDR'"  \
                                  -c "pg_distrib_dir='/usr/local/'" 
    depends_on:
      - storage_broker
    deploy:
      placement:
        constraints:
          - node.labels.has_pageserver==true
          - node.labels.region==1

  safekeeper-r1-1: &safekeeper
    restart: always
    image: ctring/neon:${TAG:-latest}
    environment:
      - SAFEKEEPER_ADVERTISE_URL=safekeeper-r1-1:5454
      - SAFEKEEPER_ID=1
      - BROKER_ENDPOINT=http://storage_broker:50051
      #- RUST_BACKTRACE=1
      #- RUST_LOG=debug
    extra_hosts:
      # While other services can connect to a safekeeper using its name, the safekeeper
      # itself cannot resolve its own name (?!), hence cannot bind to the listen-pg 
      # address. This line tricks the safekeeper to bind to 0.0.0.0.
      - safekeeper-r1-1:0.0.0.0
    ports:
      #- 5454:5454 # pg protocol handler
      - 7676:7676 # http endpoints
    entrypoint:
      - "/bin/sh"
      - "-c"
    command:
      - |
        until (/usr/bin/mc alias set minio http://minio:9000 minioadmin minioadmin) do
             echo 'Waiting to start minio...' && sleep 1
        done
        rm -rf /data/*
        /usr/bin/mc cp -r minio/neon/.neon/safekeepers/sk1 /data
        mv /data/sk1/* . && rm -r /data/sk1
        safekeeper --listen-pg=$$SAFEKEEPER_ADVERTISE_URL \
                   --listen-http='0.0.0.0:7676' \
                   --id=$$SAFEKEEPER_ID \
                   --broker-endpoint=$$BROKER_ENDPOINT \
                   -D /data
    depends_on:
      - storage_broker
    deploy:
      placement:
        constraints:
          - node.labels.has_safekeeper1==true
          - node.labels.region==1

  # safekeeper-r1-2:
  #   <<: *safekeeper
  #   environment:
  #     - SAFEKEEPER_ADVERTISE_URL=safekeeper-r1-2:5454
  #     - SAFEKEEPER_ID=2
  #     - BROKER_ENDPOINT=http://storage_broker:50051
  #     #- RUST_BACKTRACE=1
  #     #- RUST_LOG=debug
  #   extra_hosts:
  #     - safekeeper-r1-2:0.0.0.0
  #   ports: []
  #   deploy:
  #     placement:
  #       constraints:
  #         - node.labels.has_safekeeper2==true
  #         - node.labels.region==1

  # safekeeper-r1-3:
  #   <<: *safekeeper
  #   environment:
  #     - SAFEKEEPER_ADVERTISE_URL=safekeeper-r1-3:5454
  #     - SAFEKEEPER_ID=3
  #     - BROKER_ENDPOINT=http://storage_broker:50051
  #     #- RUST_BACKTRACE=1
  #     #- RUST_LOG=debug
  #   extra_hosts:
  #     - safekeeper-r1-3:0.0.0.0
  #   ports: []
  #   deploy:
  #     placement:
  #       constraints:
  #         - node.labels.has_safekeeper3==true
  #         - node.labels.region==1

  xactserver-r1: &xactserver
    image: ctring/xactserver:${TAG:-latest}
    environment:
      - NODE_ID=1
      - CONNECT_PG=postgresql://cloud_admin@compute-r1:55433/postgres
      - NODES=http://xactserver-r1:23000,http://xactserver-r2:23000
      #- RUST_LOG=debug
    extra_hosts:
      - xactserver-r1:0.0.0.0
    entrypoint:
      - "/bin/sh"
      - "-c"
    command:
      - |
        /usr/local/bin/xactserver   \
          --listen-pg=0.0.0.0:10000 \
          --connect-pg=$$CONNECT_PG \
          --node-id=$$NODE_ID       \
          --nodes=$$NODES           \
          --listen-http=0.0.0.0:8080
    deploy:
      placement:
        constraints:
          - node.labels.has_xactserver==true
          - node.labels.region==1

  compute-r1: &compute
    restart: always
    build:
      context: ./compute_wrapper/
      args:
        - REPOSITORY=ctring
        - COMPUTE_IMAGE=compute-node-v${PG_VERSION:-14}
        - TAG=${TAG:-latest}
        - http_proxy=$http_proxy
        - https_proxy=$https_proxy
    image: localhost:5000/compute-node-multi-region-v${PG_VERSION:-14}:${TAG:-latest}
    environment:
      - PG_VERSION=${PG_VERSION:-14}
      - PAGESERVER_HOST=pageserver-r1
      - SAFEKEEPERS_ADDR=safekeeper-r1-1:5454
      # - SAFEKEEPERS_ADDR=safekeeper-r1-1:5454,safekeeper-r1-2:5454,safekeeper-r1-3:5454
      - REGION=1
      - XACTSERVER=xactserver-r1:10000
      #- RUST_BACKTRACE=1
    # Mount these as configs instead of volumes so that it works correctly in swarm mode
    configs:
      - source: compute_spec
        target: /var/db/postgres/specs/spec-multi-region.json
      - source: compute_shell
        target: /shell/compute-multi-region.sh
        mode: 0555 # readable and executable
    ports:
      - 55433:55433 # pg protocol handler
    entrypoint:
      - "/shell/compute-multi-region.sh"
    depends_on:
      - safekeeper-r1-1
      # - safekeeper-r1-2
      # - safekeeper-r1-3
      - pageserver-r1
      - xactserver-r1
    deploy:
      placement:
        constraints:
          - node.labels.has_compute==true
          - node.labels.region==1

  #############################################
  #                 REGION 2                  #
  #############################################
  pageserver-r2:
    <<: *pageserver
    environment:
      - BROKER_ENDPOINT='http://storage_broker:50051'
      - LISTEN_PG_ADDR=6400
      - LISTEN_HTTP_ADDR=9898
      #- RUST_BACKTRACE=1
      #- RUST_LOG=debug
    ports:
       #- 6400:6400  # pg protocol handler
       - 9899:9898 # http endpoints
    deploy:
      placement:
        constraints:
          - node.labels.has_pageserver==true
          - node.labels.region==2

  safekeeper-r2-1:
    <<: *safekeeper
    environment:
      - SAFEKEEPER_ADVERTISE_URL=safekeeper-r2-1:5454
      - SAFEKEEPER_ID=1
      - BROKER_ENDPOINT=http://storage_broker:50051
      #- RUST_BACKTRACE=1
      #- RUST_LOG=debug
    extra_hosts:
      - safekeeper-r2-1:0.0.0.0
    ports: []
    deploy:
      placement:
        constraints:
          - node.labels.has_safekeeper1==true
          - node.labels.region==2

  # safekeeper-r2-2:
  #   <<: *safekeeper
  #   environment:
  #     - SAFEKEEPER_ADVERTISE_URL=safekeeper-r2-2:5454
  #     - SAFEKEEPER_ID=2
  #     - BROKER_ENDPOINT=http://storage_broker:50051
  #     #- RUST_BACKTRACE=1
  #     #- RUST_LOG=debug
  #   extra_hosts:
  #     - safekeeper-r2-2:0.0.0.0
  #   ports: []
  #   deploy:
  #     placement:
  #       constraints:
  #         - node.labels.has_safekeeper2==true
  #         - node.labels.region==2

  # safekeeper-r2-3:
  #   <<: *safekeeper
  #   environment:
  #     - SAFEKEEPER_ADVERTISE_URL=safekeeper-r2-3:5454
  #     - SAFEKEEPER_ID=3
  #     - BROKER_ENDPOINT=http://storage_broker:50051
  #     #- RUST_BACKTRACE=1
  #     #- RUST_LOG=debug
  #   extra_hosts:
  #     - safekeeper-r2-3:0.0.0.0
  #   ports: []
  #   deploy:
  #     placement:
  #       constraints:
  #         - node.labels.has_safekeeper3==true
  #         - node.labels.region==2

  xactserver-r2:
    <<: *xactserver
    environment:
      - NODE_ID=2
      - CONNECT_PG=postgresql://cloud_admin@compute-r2:55433/postgres
      - NODES=http://xactserver-r1:23000,http://xactserver-r2:23000
      #- RUST_LOG=debug
    extra_hosts:
      - xactserver-r2:0.0.0.0
    deploy:
      placement:
        constraints:
          - node.labels.has_xactserver==true
          - node.labels.region==2

  compute-r2:
    <<: *compute
    environment:
      - PG_VERSION=${PG_VERSION:-14}
      - PAGESERVER_HOST=pageserver-r2
      - SAFEKEEPERS_ADDR=safekeeper-r2-1:5454
      # - SAFEKEEPERS_ADDR=safekeeper-r2-1:5454,safekeeper-r2-2:5454,safekeeper-r2-3:5454
      - REGION=2
      - XACTSERVER=xactserver-r2:10000
      #- RUST_BACKTRACE=1
    ports:
      - 55434:55433 # pg protocol handler
      - 3081:3080 # http endpoints
    depends_on:
      - safekeeper-r2-1
      # - safekeeper-r2-2
      # - safekeeper-r2-3
      - pageserver-r2
      - xactserver-r2
    deploy:
      placement:
        constraints:
          - node.labels.has_compute==true
          - node.labels.region==2
